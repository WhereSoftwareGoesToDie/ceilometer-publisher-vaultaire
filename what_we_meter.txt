Core:

    metric_type = sample["type"]
    metric_unit = sample["unit"]
    payload     = sample["volume"]
    timestamp   = sample["timestamp"]
    project_id  = sample["project_id"]
    resource_id = sample["resource_id"]

Event Only:
    event_type = sample["resource_metadata"]["event_type"]

CPU - Nova - Pollster - CHECK

    (No Special Requirements)

    Match on:

        sample["name"] = "cpu"

    Output:

        metric_name = "cpu"

Disk I/O - Nova - Pollster - CHECK

    (No Special Requirements)

    Match on:

        sample["name"] = "disk.write.bytes"
        sample["name"] = "disk.read.bytes"

    Output:

        metric_name = "disk.write.bytes"
        metric_name = "disk.read.bytes"


Neutron Traffic - Nova - Pollster - CHECK

    (No Special Requirements)

    Match on:

        sample["name"] = "network.incoming.bytes"
        sample["name"] = "network.outgoing.bytes"

    Output:

        metric_name = "network.incoming.bytes"
        metric_name = "network.outgoing.bytes"

IPv4 Address Allocations - Neutron - Event - CHECK

    (Needs Special Crack)
    Event Types:
        floatingip.create.end
        floatingip.update.end
        #should probably be starts too

    Match on:
        sample["name"] = "ip.floating"
        
    Output:
        raw_payload = 1
        event_type = sample["resource_metadata"]["event_type"]
        split_event_type = event_type.split('.')
        verb = split_event_type[1]     # create/update
        endpoint = split_event_type[2] # start/end NOTE: Only end has been observed as per Event Types section
        status = sample["resource_metadata"]["status"] # ACTIVE/DOWN
        payload = consolidate_volume(raw_payload, verb, endpoint, status)



Instance, Instance Disk, Instance VCPU, Instance Memory Allocations - Nova - Pollster - CHECK
    Match on:       
        sample["name"].startswith("instance")

    Output:
    |-> Instance Disk Allocation

        metric_name = "instance_disk"
        payload = sample["resource_metadata"]["flavor"]["disk"] +
                  sample["resource_metadata"]["flavor"]["ephemeral"]
        
    |-> VCPU Allocation

        metric_name = "instance_vcpus"
        payload = sample["resource_metadata"]["flavor"]["vcpus"]

    |-> Memory Allocation

        metric_name = "instance_ram"
        payload = sample["resource_metadata"]["flavor"]["ram"]

    |-> Flavor

        metric_name = "instance_flavor"
        payload = siphash(sample["resource_metadata"]["instance_type"])


Volume - Cinder - Notification - CHECK

    (Potentially Special Crack)
    Event Types:
        volume.create.end
        volume.create.start
        volume.delete.end
        volume.delete.start
        volume.resize.end
        volume.resize.start
    Match On:
        Option 1:
            sample["name"] = volume ->
                raw_volume = sample["resource_metadata"]["size"]
        Option 2:
            sample["name"] = volume.size ->
                raw_volume = sample["volume"]                
    Output:
        event_type = sample["resource_metadata"]["event_type"]
        split_event_type = event_type.split('.')
        verb = split_event_type[1]     # create/delete/resize
        endpoint = split_event_type[2] # start/end
        status = sample["resource_metadata"]["status"] # available/creating/deleting/extending
        payload = consolidate_volume(raw_payload, verb, endpoint, status)

